#include <stdio.h>
#include <math.h>
#include <assert.h>
#include "sq_sol.h"




///Main logic functions

void get_input (double *coef, char letter);
int check_input (double a_coef, double b_coef, double c_coef);
int square_solve (double a_coef, double b_coef, double c_coef, double *sol1, double *sol2);
int linear_solve (double b_coef, double c_coef, double* sol1);
int special_case (double c_coef);

///Additional function

int compare (double dble); // == 0 for double
int compare2 (double dble1, double dble2); // == for double


void input(double *a_coef, double *b_coef, double *c_coef){

    printf("Please, enter the coefficients of your equation of the form a*x^2 + b*x + c = 0\n");

    get_input (a_coef, 'a');
    get_input (b_coef, 'b');
    get_input (c_coef, 'c');
}

void get_input (double *coef, char letter){

    printf ("%c: ", letter);

    int flag;
    while ((flag = scanf ("%lf", coef)) != EOF  !flag){

        printf ("Your input has wrong type, please, reenter coefficient %c\n", letter);
        printf ("%c: ", letter);

        while (getchar () != '\n')  // buffer clean
              ;
    }
}

//-----------------------------------------------------------------------------

int Solve(double a_coef,double b_coef, double c_coef, double *sol1, double *sol2){

    assert (isfinite (a_coef));
    assert (isfinite (b_coef));
    assert (isfinite (c_coef));

    assert (sol1 != NULL);
    assert (sol2 != NULL);
    assert (sol1 != sol2);

    int num_roots = TOXIC;

    if (compare (a_coef)) {

        if (compare (b_coef)){

            num_roots = special_case (c_coef);
            *sol1 = 0;
            *sol2 = *sol1;
        }

        else{
            num_roots = linear_solve (b_coef, c_coef, sol1);

            *sol2 = *sol1;
        }

    }
    else num_roots = square_solve (a_coef, b_coef, c_coef, sol1, sol2);

    return num_roots;
}

//-----------------------------------------------------------------------------

int square_solve(double a_coef, double b_coef, double c_coef, double *sol1, double *sol2){

    assert (isfinite (a_coef));
    assert (isfinite (b_coef));
    assert (isfinite (c_coef));
    assert (!compare (a_coef));

    assert (sol1 != NULL);
    assert (sol2 != NULL);
    assert (sol1 != sol2);

    double discr = 0;  // The discriminant of equation and its square root
    double inv_a_coefx2 = 1 / (a_coef * 2); // Due to inevitability of computation we take it once

    discr = b_coef * b_coef - 4 * a_coef * c_coef;// compute the discriminant of equation

    if (compare (discr)){

        *sol1 = -b_coef * inv_a_coefx2;
        *sol2 = *sol1;

        return 1;
    }

    else if (discr > 0){

        discr = sqrt (discr);
        *sol1 = (-b_coef + discr) * inv_a_coefx2;
        *sol2 = (-b_coef - discr) * inv_a_coefx2;

        return 2;
    }

    *sol1 = 0;
    *sol2 = *sol1;

    return 0;
}

//-----------------------------------------------------------------------------

int linear_solve (double b_coef, double c_coef, double *sol1) {
    assert (isfinite (b_coef));
    assert (isfinite (c_coef));
    assert (!compare (b_coef));

    assert (sol1 != NULL);

    *sol1 = -c_coef / b_coef;

    return 1;
}

//-----------------------------------------------------------------------------

int special_case (double c_coef){

    assert (isfinite (c_coef));

    if (compare(c_coef)) return INFINITE;

    return 0;
}

//-----------------------------------------------------------------------------

int output(double sol1, double sol2, int num_roots){

    assert (isfinite (sol1));
    assert (isfinite (sol2));

    switch (num_roots){

    case 1 : {

        printf ("Your equation has only one root: %g", sol1);

        return 0;
    }

    case 2 : {

        printf ("Your equation has two roots: \nx1 = %g \nx2 = %g", sol1, sol2);

        return 0;
    }

    case -1 : {
        printf ("Your equation has complex roots");

        return 1;
    }

    case 0 : {

        printf ("Your equation has no roots");

        return 0;
    }

    case INFINITE : {
        printf ("Your equation has INFINITE roots");

        return 0;
    }

    default : return 2;
    }
}

//-----------------------------------------------------------------------------
const double EPS = 0.000000000001;
int compare (double dble){

    assert (isfinite(dble));

    return EPS > fabs (dble);
}

//-----------------------------------------------------------------------------

int compare2(double dble1, double dble2){

    assert (isfinite (dble1));
    assert (isfinite (dble2));

    return EPS > fabs (dble1 - dble2);
}

